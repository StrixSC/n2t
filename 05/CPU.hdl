// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instruction written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // 1 11 a cccccc ddd jjj
        // i = 0 -> A Instruction
        // i = 1 -> C Instruction 
        // i  X  X  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
        // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

        And(a=instruction[15], b=true, out=i);
        And(a=i,    b=instruction[12], out=a);
        And(a=i,    b=instruction[11], out=c1);
        And(a=i,    b=instruction[10], out=c2);
        And(a=i,    b=instruction[9],  out=c3);
        And(a=i,    b=instruction[8],  out=c4);
        And(a=i,    b=instruction[7],  out=c5);
        And(a=i,    b=instruction[6],  out=c6);
        Mux(a=true, b=instruction[5],  sel=i, out=d1);
        And(a=i,    b=instruction[4],  out=d2);
        And(a=i,    b=instruction[3],  out=d3);
        And(a=i,    b=instruction[2],  out=j1);
        And(a=i,    b=instruction[1],  out=j2);
        And(a=i,    b=instruction[0],  out=j3);
        
        // First mux, directs the right input to the ARegister.
        Mux16(a=instruction, b=oALU, sel=i, out=mxA);
        
        /* addressM: */
        ARegister(in=mxA, load=d1, out=A, out[0..14]=addressM);  // Contains the output of the ALU or the instruction, depending on the instruction[15] (i) of the instruction input.
        
        DRegister(in=oALU, load=d2, out=D); // Contains the last ALU output.
        Mux16(a=A, b=inM, sel=a, out=AM);   // Second mux, outputs the value of inM or the previous address depending on the instruction[12] (a)
        
        /* outM: */
        ALU(
            x=D,        // DRegister
            y=AM,       // A or M Register
            zx=c1,
            nx=c2,
            zy=c3,
            ny=c4,
            f =c5,
            no=c6,
            out=oALU,
            out=outM,
            // These two are used to compute the C bits for the PC chip
            zr=oZr,     // == 1 if oALU == 0
            ng=oNg      // == 1 if oALU < 0
        );
        Not(in=oZr, out=oNE);
        Not(in=oNg, out=oGE);

        /* pc: */
        And(a=i, b=j3, out=jgt);
        And(a=i, b=j2, out=jeq);
        And(a=i, b=j1, out=jlt);
        And(a=jgt, b=jeq, out=gteq);
        And(a=gteq, b=jlt, out=loadJMP);

        // Equal to 0
        And(a=oZr, b=jeq, out=loadEQ);
        
        // Less than 0
        And(a=oNg, b=jlt, out=loadLT);

        // Greater than 0
        And(a=oGE, b=oNE, out=oGT);
        And(a=oGT, b=jgt, out=loadGT);

        // Greater or Equal
        And(a=j2, b=j3, out=jge);
        And(a=oGE, b=jge, out=loadGE);
        
        // Not equal to 0
        And(a=j1, b=j3, out=jne);
        And(a=oNE, b=jne, out=loadNE);

        // Lesser or equal to 0
        Or(a=oZr, b=oNg, out=oLE);
        And(a=j1, b=j2, out=jle);
        And(a=oLE, b=jle, out=loadLE);

        Or8Way(
            in[0]=false,
            in[1]=loadGT,
            in[2]=loadEQ,
            in[3]=loadGE,
            in[4]=loadLT,
            in[5]=loadNE,
            in[6]=loadLE,
            in[7]=loadJMP,
            out=load
        );

        Not(in=load, out=inc);
        PC(in=A, load=load, inc=inc, reset=reset, out[0..14]=pc);

        /* writeM: */
        And(a=i, b=d3, out=writeM);
}